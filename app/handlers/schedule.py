from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from datetime import datetime
from app import db
from app.utils import parse_user_datetime, day_bounds, week_bounds
from app.keyboards.common import event_actions_kb
from app.scheduler import schedule_event_notification, unschedule_event

router = Router()

# ---------- FSM ----------
class EventCreate(StatesGroup):
    title = State()
    when_dt = State()
    remind = State()

@router.message(Command("addevent"))
async def addevent_start(m: Message, state: FSMContext):
    await state.set_state(EventCreate.title)
    await m.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")

@router.message(EventCreate.title, F.text.len() > 0)
async def addevent_title(m: Message, state: FSMContext):
    await state.update_data(title=m.text.strip())
    await state.set_state(EventCreate.when_dt)
    await m.answer("–ö–æ–≥–¥–∞? –§–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM")

@router.message(EventCreate.when_dt, F.text.len() > 0)
async def addevent_when(m: Message, state: FSMContext):
    try:
        dt = parse_user_datetime(m.text)
    except Exception:
        return await m.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 2025-09-30 10:00")
    await state.update_data(when_dt=dt)
    await state.set_state(EventCreate.remind)
    await m.answer("–ó–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30)")

@router.message(EventCreate.remind, F.text.len() > 0)
async def addevent_finish(m: Message, state: FSMContext):
    try:
        remind = int(m.text.strip())
    except Exception:
        return await m.answer("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä 30.")
    data = await state.get_data()
    title: str = data["title"]
    when_dt: datetime = data["when_dt"]
    ev_id = db.add_event(m.from_user.id, title, when_dt.isoformat(), remind)
    await state.clear()
    row = db.get_event(ev_id)
    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    schedule_event_notification(m.bot, row)
    await m.answer(f"‚úÖ –°–æ–±—ã—Ç–∏–µ #{ev_id}: {title}\n–í—Ä–µ–º—è: {when_dt}\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ {remind} –º–∏–Ω.",
                   reply_markup=event_actions_kb(ev_id))

@router.message(Command("today"))
async def today(m: Message):
    start, end = day_bounds(datetime.now())
    rows = db.list_events_between(m.from_user.id, start.isoformat(), end.isoformat())
    if not rows:
        return await m.answer("–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç.")
    txt = "\n".join([f"#{r['id']} ‚Ä¢ {r['title']} ‚Äî {r['when_dt']}" for r in rows])
    await m.answer(txt)

@router.message(Command("week"))
async def week(m: Message):
    start, end = week_bounds(datetime.now())
    rows = db.list_events_between(m.from_user.id, start.isoformat(), end.isoformat())
    if not rows:
        return await m.answer("–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç.")
    txt = "\n".join([f"#{r['id']} ‚Ä¢ {r['title']} ‚Äî {r['when_dt']}" for r in rows])
    await m.answer(txt)

@router.message(Command("delevent"))
async def delevent_cmd(m: Message):
    args = (m.text or "").split(maxsplit=1)
    if len(args) < 2: return await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delevent <id>")
    try:
        ev_id = int(args[1])
    except:
        return await m.answer("id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    ok = db.delete_event(m.from_user.id, ev_id)
    if ok:
        unschedule_event(ev_id)
    await m.answer("üóë –£–¥–∞–ª–µ–Ω–æ." if ok else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ.")

@router.callback_query(F.data.startswith("delevent:"))
async def delevent_cb(c: CallbackQuery):
    ev_id = int(c.data.split(":")[1])
    ok = db.delete_event(c.from_user.id, ev_id)
    if ok:
        unschedule_event(ev_id)
    await c.answer("–£–¥–∞–ª–µ–Ω–æ." if ok else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=False)
    try:
        await c.message.delete()
    except:
        pass
